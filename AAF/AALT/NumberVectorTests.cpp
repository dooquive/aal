/*
    MPEI Algebraic Abstractions Library,
    2007-2011,
    Moscow Power Engineering Institute

        This file contains tests of the following classes:

*/
#include <iostream>
#include "./CppUnitLite/TestHarness.h"
#include "./AAF/AAL/NumberVector.h"
using namespace AAL;

/*
	Конструкторы класса Integer
*/
TEST(NumberVector, EmptyConstructor)
{
	NumberVector n;
	CHECK(n.isZero());
}

TEST(NumberVector, CopyConstructor)
{
	NumberVector i("235235 23523 5235235235 23523678980 76794251 7895997636"),j(i);
	CHECK(i==j);
}

TEST(NumberVector, StringConstructor)
{
	NumberVector a(""), b(" "), c("7329874523895682935 8237458932598325 32858932659823598");
	Integer c0("7329874523895682935"), c1("8237458932598325"), c2("32858932659823598");

	CHECK(a.isZero());
	CHECK(b.isZero());
	CHECK(!c.isZero() && c.getNumberDigits()==3 && c.getNumber(0)==c0 && c.getNumber(1)==c1 && c.getNumber(2)==c2);
}

/*
	Методы акцепторы
*/
/*TEST(Integer, getNumberBits)
{
	Integer i("1000000000000000000000000000000000000000000000000000000"), j;
	CHECK(i.getNumberBits() == 180);
	CHECK(j.getNumberBits() == 0);
}

TEST(Integer, getNumberBytes)
{
	Integer i("1000000000000000000000000000000000000000000000000000000"), j, k("123456", Hex);
	CHECK(i.getNumberBytes() == 23);
	CHECK(j.getNumberBytes() == 0);
	CHECK(k.getNumberBytes() == 3);
}

TEST(Integer, getDigit)
{
	Integer i("100000111111110101010101010000010000100000", Bin);
	CHECK(i.getDigit(1) == 527);
}

TEST(Integer, setDigit)
{
	Integer i("32512122FFFFFFFF", Hex);
	i.setDigit(2, -1);
	CHECK(i.getDigit(2) == -1 && i.ToString(Hex) == "ffffffff32512122ffffffff");
}*/

/*
	Унарные операторы
*/
/*TEST(Integer, operatorEqual)
{
	Integer i1("2352352352356236236236");
	Integer i2("92386598236589236589236589236589236589236589");
	Integer i3("2352352525");
	Integer ii1, ii2, ii3, ii4;

	ii1 = i1;
	ii2 = ii3 = i2;

	i2 = i1;
	i3 = ii4;

	CHECK(ii1 == i1 && !ii1.isZero() && ii1.ToString() == "2352352352356236236236");
	CHECK(ii2 == ii3 && !ii3.isZero() && ii2.ToString() == "92386598236589236589236589236589236589236589");
	CHECK(i2 == i1 && i2.getNumberDigits() == 3 && i2.ToString() == "2352352352356236236236");
	CHECK(i3.isZero());
}/*

/*
	Операция сложения
*/
/*TEST(Integer, Add)
{
	Integer i("93824598236548923659823658923658923658923658932589238596"), j("923645892359023750923759023759032759023750923759072350"), k("-02395092375923589236589236589236589236598236589236598235");
	Integer l(-1);
	Integer zero;

	Integer iADDj("94748244128907947410747417947417956417947409856348310946");
	Integer jADDk("-1471446483564565485665477565477556477574485665477525885");

	CHECK((i+j) == iADDj && i.ToString()=="93824598236548923659823658923658923658923658932589238596" && j.ToString() == "923645892359023750923759023759032759023750923759072350");
	CHECK(i.Add(i, j) == iADDj && j.ToString() == "923645892359023750923759023759032759023750923759072350" && i.ToString() != "93824598236548923659823658923658923658923658932589238596");
	CHECK(j.Add(j, zero).ToString() == "923645892359023750923759023759032759023750923759072350" && !j.isZero() && zero.isZero());
	CHECK((j + k) == jADDk && j.ToString() == "923645892359023750923759023759032759023750923759072350" && k.ToString() == "-2395092375923589236589236589236589236598236589236598235");
	CHECK(l.Add(l,l) == -2);
}*/

/*
	Операция вычитания
*/
/*TEST(Integer, Sub)
{
	Integer i("93824598236548923659823658923658923658923658932589238596"), j("923645892359023750923759023759032759023750923759072350"), k("-02395092375923589236589236589236589236598236589236598235");
	Integer l(-1);
	Integer m(1);
	Integer zero;

	Integer iSUBj("92900952344189899908899899899899890899899908008830166246");
	Integer jSUBk("3318738268282612987512995612995621995621987512995670585");
	Integer kSUBi("-96219690612472512896412895512895512895521895521825836831");

	CHECK((i-j) == iSUBj && i.ToString()=="93824598236548923659823658923658923658923658932589238596" && j.ToString()=="923645892359023750923759023759032759023750923759072350");
	CHECK((k-i) == kSUBi && i.ToString()=="93824598236548923659823658923658923658923658932589238596" && k.ToString()=="-2395092375923589236589236589236589236598236589236598235");
	CHECK(i.Sub(i, j) == iSUBj && j.ToString()=="923645892359023750923759023759032759023750923759072350" && i.ToString() != "93824598236548923659823658923658923658923658932589238596");
	CHECK(j.Sub(j, zero).ToString() == "923645892359023750923759023759032759023750923759072350" && !j.isZero() && zero.isZero() && j.Sub(zero, j).Negate().ToString() == "923645892359023750923759023759032759023750923759072350");
	CHECK((j-k) == jSUBk && j.ToString()=="923645892359023750923759023759032759023750923759072350" && k.ToString()=="-2395092375923589236589236589236589236598236589236598235");
	CHECK(l.Sub(l,m) == -2);
	CHECK(m.Sub(m, m) == 0 && m.isZero());
}*/

/*
	Тесты для парсинга и перевода в строку
*/
/*TEST(Integer, SimpleParse)
{
	Integer a,b,c,d;
	std::string hexNumber = "ababf98234f5f9f0f8f2f3f65f9f0f2f3f75a9a0a32a7a5a9ac2c0c3c5c7c9c0c23c5c7c34634764367436436346346346436346346";
	std::string decNumber = "464833135264483657268392702305618602710357582818544649603488732117126373452405861590191015088422093330847562441596318164777722694";
	std::string octNumber = "25352774602151727717417436274773137476074571767265150121452364552326054030361343711601410742707606430643544154720662066150615061506206615061506";
	std::string binNumber = "10101011101010111111100110000010001101001111010111111001111100001111100011110010111100111111011001011111100111110000111100101111001111110111010110101001101000001010001100101010011110100101101010011010110000101100000011000011110001011100011111001001110000001100001000111100010111000111110000110100011000110100011101100100001101100111010000110110010000110110001101000110001101000110001101000110010000110110001101000110001101000110";

	a.Parse(hexNumber, Hex);
	b.Parse(decNumber, Dec);
	c.Parse(octNumber, Oct);
	d.Parse(binNumber, Bin);

	CHECK(a==b && a==c && a==d);
}

TEST(Integer, NegativeParse)
{
	Integer a,b,c,d;
	std::string hexNumber = "-928164912642891469812649acdababf98234f5f9f0f8f2f3f65f9faffffffffffffff0f2f3f75a9a0a32a7a5a9ac2c0c3c5c7c9c0c23c5c7c34634764cdeeeeeeebbbb36bbbb7b4b3b64b3b6b3b46b3b4b63b4b6b4b36346346";
	std::string decNumber = "-3156535414053327452312266685358778094683706038785631120798387038911455479251318200952876927167039618765681003356343581297803187224754517379255600219286777123003744291437601504365711225459892225667067556394586632119110";
	std::string octNumber = "-445005444422310242212151402231115315527257714043236576370370745717662771765777777777777777777417136375655232024312475132465413006074270762340302170561741506150731146756735673535673155356733664547331131666547321531664554355133264546615061506";
	std::string binNumber = "-100100101000000101100100100100010010011001000010100010010001010001101001100000010010011001001001101011001101101010111010101111111001100000100011010011110101111110011111000011111000111100101111001111110110010111111001111110101111111111111111111111111111111111111111111111111111111100001111001011110011111101110101101010011010000010100011001010100111101001011010100110101100001011000000110000111100010111000111110010011100000011000010001111000101110001111100001101000110001101000111011001001100110111101110111011101110111011101011101110111011001101101011101110111011011110110100101100111011011001001011001110110110101100111011010001101011001110110100101101100011101101001011011010110100101100110110001101000110001101000110";

	a.Parse(hexNumber, Hex);
	b.Parse(decNumber, Dec);
	c.Parse(octNumber, Oct);
	d.Parse(binNumber, Bin);

	CHECK(a==b && a==c && a==d);
}

TEST(Integer, NullParse)
{
	Integer a(1),b(2),c;
	std::string nullString1 = "0";
	std::string nullString2 = "-0";

	a.Parse(nullString1);
	b.Parse(nullString2);

	CHECK(a==b && a==c);
}

TEST(Integer, EmptyParse)
{
	Integer a(1),b(2),c;
	std::string emptyString1 = "";
	std::string emptyString2 = "-";

	a.Parse(emptyString1);
	b.Parse(emptyString2);
	CHECK(a==b && a==c);
}

TEST(Integer, ErrorStringParse)
{
	Integer a;
	std::string hexNumber = "ababf023975jflsdnfdklhg9w34y50923754-02q3rwajf;oasjf98234f5f9f0f8f2f3f65f9f0f2f3f75a9a0a32a7a5a9ac2c0c3c5c7c9c0c23c5c7c34634764367436436346346346436346346";
	try
	{
		a.Parse(hexNumber, Hex);
		CHECK(false);
	}
	catch(std::domain_error ex)
	{
		CHECK(true);
	}
}

TEST(Integer, SimpleToString)
{
	std::string str1("2352356389252389658923648912642891642891648129648912658912658965");
	std::string str2("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");

	Integer a(str1), b(str2);

	CHECK(a.ToString() == str1);
	CHECK(b.ToString() == str2);
}*/